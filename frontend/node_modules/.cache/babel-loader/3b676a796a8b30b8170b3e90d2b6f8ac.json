{"ast":null,"code":"// Header\nimport HeaderLog from \"@/components/HeaderLog.vue\"; // Axios\n\nconst axios = require(\"axios\");\n\nconst instance = axios.create({\n  baseURL: \"http://localhost:3000/api/\"\n}); // Export\n\nexport default {\n  name: \"LoginView\",\n  props: [\"\"],\n\n  data() {\n    return {\n      titre: \"Se connecter\",\n      email: \"\",\n      password: \"\",\n      emailDisplayed: false,\n      passwordDisplayed: false,\n      errorMessage: null,\n      sessionToken: null\n    };\n  },\n\n  methods: {\n    // Vérification Regex + gestion affichage message d'erreur\n    analyseEmail: function () {\n      let regEmail = new RegExp(\"[a-z0-9]+@[a-z]+[.]+[a-z]{2,3}\");\n      let testEmail = regEmail.exec(this.email);\n\n      if (testEmail) {\n        this.emailDisplayed = false;\n      } else {\n        this.emailDisplayed = true;\n      }\n    },\n    // Vérification présence mot de passe et gestion affichage message d'erreur\n    checkPassword: function () {\n      if (this.password != \"\") {\n        this.passwordDisplayed = false;\n      } else {\n        this.passwordDisplayed = true;\n      }\n    },\n    // Vérification de tous les champs et gestion activation/désactivation du bouton \"se connecter\"\n    validatedFields: function () {\n      let regEmail = new RegExp(\"[a-z0-9]+@[a-z]+[.]+[a-z]{2,3}\");\n      let testEmail = regEmail.exec(this.email);\n\n      if (testEmail && this.password != \"\") {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    // Envoi API - connection utilisateur déjà existant\n    loginAccount: function () {\n      let userInfos = {\n        email: this.email,\n        password: this.password\n      };\n      instance.post(\"auth/login\", userInfos).then(response => {\n        console.log(response.data.token);\n        this.$store.state.sessionToken = response.data.token; // Récupération du token dans le state\n\n        this.$router.push(\"/\"); // Redirection vers accueil\n      }).catch(error => {\n        console.log(error);\n        this.errorMessage = error.response.data.error; // Affichage du message d'erreur\n      });\n    }\n  },\n  components: {\n    HeaderLog\n  }\n};","map":{"version":3,"mappings":"AA8CA;AACA,OAAOA,SAAP,MAAsB,4BAAtB,C,CAEA;;AACA,MAAMC,KAAI,GAAIC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,QAAO,GAAIF,KAAK,CAACG,MAAN,CAAa;AAC5BC,SAAO,EAAE;AADmB,CAAb,CAAjB,C,CAIA;;AACA,eAAe;AACbC,MAAI,EAAE,WADO;AAEbC,OAAK,EAAE,CAAC,EAAD,CAFM;;AAGbC,MAAI,GAAG;AACL,WAAO;AACLC,WAAK,EAAE,cADF;AAELC,WAAK,EAAE,EAFF;AAGLC,cAAQ,EAAE,EAHL;AAILC,oBAAc,EAAE,KAJX;AAKLC,uBAAiB,EAAE,KALd;AAMLC,kBAAY,EAAE,IANT;AAOLC,kBAAY,EAAE;AAPT,KAAP;AASD,GAbY;;AAcbC,SAAO,EAAE;AACP;AACAC,gBAAY,EAAE,YAAY;AACxB,UAAIC,QAAO,GAAI,IAAIC,MAAJ,CAAW,gCAAX,CAAf;AACA,UAAIC,SAAQ,GAAIF,QAAQ,CAACG,IAAT,CAAc,KAAKX,KAAnB,CAAhB;;AACA,UAAIU,SAAJ,EAAe;AACb,aAAKR,cAAL,GAAsB,KAAtB;AACF,OAFA,MAEO;AACL,aAAKA,cAAL,GAAsB,IAAtB;AACF;AACD,KAVM;AAYP;AACAU,iBAAa,EAAE,YAAY;AACzB,UAAI,KAAKX,QAAL,IAAiB,EAArB,EAAyB;AACvB,aAAKE,iBAAL,GAAyB,KAAzB;AACF,OAFA,MAEO;AACL,aAAKA,iBAAL,GAAyB,IAAzB;AACF;AACD,KAnBM;AAqBP;AACAU,mBAAe,EAAE,YAAY;AAC3B,UAAIL,QAAO,GAAI,IAAIC,MAAJ,CAAW,gCAAX,CAAf;AACA,UAAIC,SAAQ,GAAIF,QAAQ,CAACG,IAAT,CAAc,KAAKX,KAAnB,CAAhB;;AAEA,UAAIU,SAAQ,IAAK,KAAKT,QAAL,IAAiB,EAAlC,EAAsC;AACpC,eAAO,IAAP;AACF,OAFA,MAEO;AACL,eAAO,KAAP;AACF;AACD,KA/BM;AAiCP;AACAa,gBAAY,EAAE,YAAY;AACxB,UAAIC,SAAQ,GAAI;AACdf,aAAK,EAAE,KAAKA,KADE;AAEdC,gBAAQ,EAAE,KAAKA;AAFD,OAAhB;AAKAR,cAAO,CACJuB,IADH,CACQ,YADR,EACsBD,SADtB,EAEGE,IAFH,CAESC,QAAD,IAAc;AAClBC,eAAO,CAACC,GAAR,CAAYF,QAAQ,CAACpB,IAAT,CAAcuB,KAA1B;AACA,aAAKC,MAAL,CAAYC,KAAZ,CAAkBlB,YAAlB,GAAiCa,QAAQ,CAACpB,IAAT,CAAcuB,KAA/C,CAFkB,CAEoC;;AACtD,aAAKG,OAAL,CAAaC,IAAb,CAAkB,GAAlB,EAHkB,CAGM;AACzB,OANH,EAOGC,KAPH,CAOUC,KAAD,IAAW;AAChBR,eAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,aAAKvB,YAAL,GAAoBuB,KAAK,CAACT,QAAN,CAAepB,IAAf,CAAoB6B,KAAxC,CAFgB,CAE+B;AAChD,OAVH;AAWD;AAnDM,GAdI;AAmEbC,YAAU,EAAE;AAAEtC;AAAF;AAnEC,CAAf","names":["HeaderLog","axios","require","instance","create","baseURL","name","props","data","titre","email","password","emailDisplayed","passwordDisplayed","errorMessage","sessionToken","methods","analyseEmail","regEmail","RegExp","testEmail","exec","checkPassword","validatedFields","loginAccount","userInfos","post","then","response","console","log","token","$store","state","$router","push","catch","error","components"],"sourceRoot":"","sources":["/Users/clemencebonneaud/Desktop/Dev/OpenClassrooms/Cours/OC_P7/code/frontend/groupomania-v1.0/src/views/LoginView.vue"],"sourcesContent":["<template>\n  <div class=\"signup\">\n    <!-- Header -->\n    <HeaderLog />\n\n    <h1>{{ titre }}</h1>\n\n    <!-- Formulaire -->\n    <div class=\"bloc\">\n      <form>\n        <label>Email</label>\n        <input v-model=\"email\" type=\"email\" @keyup=\"analyseEmail()\" />\n        <!-- Message qui apparaît si le champ est mal rempli -->\n        <p class=\"formMessage\" v-if=\"emailDisplayed\">\n          Veuillez saisir un email valide\n        </p>\n\n        <label>Mot de passe</label>\n        <input v-model=\"password\" type=\"password\" @change=\"checkPassword()\" />\n        <p class=\"formMessage\" v-if=\"passwordDisplayed\">\n          Veuillez saisir un mot de passe\n        </p>\n      </form>\n\n      <!-- Message d'erreur en cas d'erreur côté serveur -->\n      <p v-if=\"errorMessage\" class=\"errorMessage\">\n        Oups ! Il semble que {{ errorMessage }}\n      </p>\n\n      <!-- Bouton désactivé -->\n      <button v-if=\"!validatedFields()\" class=\"bouton bouton--disabled\">\n        Se connecter\n      </button>\n\n      <!-- Bouton activé -->\n      <button v-if=\"validatedFields()\" class=\"bouton\" @click=\"loginAccount()\">\n        Se connecter\n      </button>\n    </div>\n  </div>\n</template>\n\n<!-- ////////////////////////////////////////////////// -->\n<!-- ////////////////////////////////////////////////// -->\n\n<script>\n// Header\nimport HeaderLog from \"@/components/HeaderLog.vue\";\n\n// Axios\nconst axios = require(\"axios\");\nconst instance = axios.create({\n  baseURL: \"http://localhost:3000/api/\",\n});\n\n// Export\nexport default {\n  name: \"LoginView\",\n  props: [\"\"],\n  data() {\n    return {\n      titre: \"Se connecter\",\n      email: \"\",\n      password: \"\",\n      emailDisplayed: false,\n      passwordDisplayed: false,\n      errorMessage: null,\n      sessionToken: null,\n    };\n  },\n  methods: {\n    // Vérification Regex + gestion affichage message d'erreur\n    analyseEmail: function () {\n      let regEmail = new RegExp(\"[a-z0-9]+@[a-z]+[.]+[a-z]{2,3}\");\n      let testEmail = regEmail.exec(this.email);\n      if (testEmail) {\n        this.emailDisplayed = false;\n      } else {\n        this.emailDisplayed = true;\n      }\n    },\n\n    // Vérification présence mot de passe et gestion affichage message d'erreur\n    checkPassword: function () {\n      if (this.password != \"\") {\n        this.passwordDisplayed = false;\n      } else {\n        this.passwordDisplayed = true;\n      }\n    },\n\n    // Vérification de tous les champs et gestion activation/désactivation du bouton \"se connecter\"\n    validatedFields: function () {\n      let regEmail = new RegExp(\"[a-z0-9]+@[a-z]+[.]+[a-z]{2,3}\");\n      let testEmail = regEmail.exec(this.email);\n\n      if (testEmail && this.password != \"\") {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    // Envoi API - connection utilisateur déjà existant\n    loginAccount: function () {\n      let userInfos = {\n        email: this.email,\n        password: this.password,\n      };\n\n      instance\n        .post(\"auth/login\", userInfos)\n        .then((response) => {\n          console.log(response.data.token);\n          this.$store.state.sessionToken = response.data.token; // Récupération du token dans le state\n          this.$router.push(\"/\"); // Redirection vers accueil\n        })\n        .catch((error) => {\n          console.log(error);\n          this.errorMessage = error.response.data.error; // Affichage du message d'erreur\n        });\n    },\n  },\n  components: { HeaderLog },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}