{"ast":null,"code":"import { createStore } from \"vuex\";\n/* import createPersistedState from 'vuex-persistedstate';\nimport SecureLS from \"secure-ls\";\n\nconst ls = new SecureLS({ isCompression: false }); */\n\nexport default createStore({\n  state: {\n    sessionToken: null,\n    userId: null,\n    shares: []\n  },\n  getters: {},\n  mutations: {\n    addShare(state, share) {\n      state.shares.push(share);\n    },\n\n    myToken: (state, value) => value ? state.sessionToken = value : state.sessionToken = \"\"\n  },\n  actions: {},\n  modules: {}\n  /*   plugins: [\n      createPersistedState({\n        storage: {\n          setItem: (key, value) => ls.set(key, value),\n          removeItem: key => ls.remove(key)\n        }\n      })\n    ], */\n\n});","map":{"version":3,"sources":["/Users/clemencebonneaud/Desktop/Dev/OpenClassrooms/Cours/OC_P7/code/frontend/groupomania-v1.0/src/store/index.js"],"names":["createStore","state","sessionToken","userId","shares","getters","mutations","addShare","share","push","myToken","value","actions","modules"],"mappings":"AAAA,SAASA,WAAT,QAA4B,MAA5B;AACA;AACA;AACA;AACA;;AAEA,eAAeA,WAAW,CAAC;AACzBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE,IADT;AAELC,IAAAA,MAAM,EAAE,IAFH;AAGLC,IAAAA,MAAM,EAAE;AAHH,GADkB;AAMzBC,EAAAA,OAAO,EAAE,EANgB;AAQzBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,CAAEN,KAAF,EAASO,KAAT,EAAgB;AACtBP,MAAAA,KAAK,CAACG,MAAN,CAAaK,IAAb,CAAkBD,KAAlB;AACD,KAHQ;;AAITE,IAAAA,OAAO,EAAE,CAACT,KAAD,EAAQU,KAAR,KACTA,KAAK,GAAIV,KAAK,CAACC,YAAN,GAAqBS,KAAzB,GAAmCV,KAAK,CAACC,YAAN,GAAqB;AALpD,GARc;AAezBU,EAAAA,OAAO,EAAE,EAfgB;AAiBzBC,EAAAA,OAAO,EAAE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzB2B,CAAD,CAA1B","sourcesContent":["import { createStore } from \"vuex\";\n/* import createPersistedState from 'vuex-persistedstate';\nimport SecureLS from \"secure-ls\";\n\nconst ls = new SecureLS({ isCompression: false }); */\n\nexport default createStore({\n  state: {\n    sessionToken: null,\n    userId: null,\n    shares: [],\n  },\n  getters: {\n  },\n  mutations: {\n    addShare (state, share) {\n      state.shares.push(share)\n    },\n    myToken: (state, value) =>\n    value ? (state.sessionToken = value) : (state.sessionToken = \"\")\n  },\n  actions: {\n  },\n  modules: {},\n/*   plugins: [\n    createPersistedState({\n      storage: {\n        setItem: (key, value) => ls.set(key, value),\n        removeItem: key => ls.remove(key)\n      }\n    })\n  ], */\n});\n"]},"metadata":{},"sourceType":"module"}