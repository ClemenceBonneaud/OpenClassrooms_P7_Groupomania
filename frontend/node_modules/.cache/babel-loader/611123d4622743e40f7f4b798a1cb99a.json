{"ast":null,"code":"// Header\nimport HeaderLog from \"@/components/HeaderLog.vue\"; // Axios\n\nconst axios = require(\"axios\");\n\nconst instance = axios.create({\n  baseURL: \"http://localhost:3000/api/\"\n});\nexport default {\n  name: \"SignupView\",\n  path: \"/auth/signup\",\n  props: [\"\"],\n\n  data() {\n    return {\n      titre: \"S'inscrire\",\n      nom: \"\",\n      prenom: \"\",\n      job: \"\",\n      email: \"\",\n      password: \"\",\n      emailDisplayed: false,\n      passwordDisplayed: false,\n      errorMessage: null,\n      sessionToken: null\n    };\n  },\n\n  methods: {\n    // Vérifications RegEx\n    nomRegexValid: function () {\n      let regName = new RegExp(\"^[a-zA-Z-'.ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ ]*$\");\n      let testNom = regName.exec(this.nom);\n      return testNom;\n    },\n    prenomRegexValid: function () {\n      let regName = new RegExp(\"^[a-zA-Z-'.ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ ]*$\");\n      let testPrenom = regName.exec(this.prenom);\n      return testPrenom;\n    },\n    jobRegexValid: function () {\n      let regName = new RegExp(\"^[a-zA-Z-'.ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ ]*$\");\n      let testJob = regName.exec(this.job);\n      return testJob;\n    },\n    // Vérification Regex + gestion affichage message d'erreur\n    analyseEmail: function () {\n      let regEmail = new RegExp(\"[a-z0-9]+@[a-z]+[.]+[a-z]{2,3}\");\n      let testEmail = regEmail.exec(this.email);\n\n      if (testEmail) {\n        this.emailDisplayed = false;\n      } else {\n        this.emailDisplayed = true;\n      }\n    },\n    // Vérification présence mot de passe et gestion affichage message d'erreur\n    checkPassword: function () {\n      if (this.password != \"\") {\n        this.passwordDisplayed = false;\n      } else {\n        this.passwordDisplayed = true;\n      }\n    },\n    // Vérification de tous les champs et gestion activation/désactivation du bouton \"se connecter\"\n    validatedFields: function () {\n      let regName = new RegExp(\"^[a-zA-Z-'.ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ ]*$\");\n      let regEmail = new RegExp(\"[a-z0-9]+@[a-z]+[.]+[a-z]{2,3}\");\n      let testNom = regName.exec(this.nom);\n      let testPrenom = regName.exec(this.prenom);\n      let testJob = regName.exec(this.job);\n      let testEmail = regEmail.exec(this.email);\n\n      if (testNom && testPrenom && testJob && testEmail && this.password != \"\") {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    // Envoi API - création nouvel utilisateur\n    createAccount: function () {\n      let userInfos = {\n        lastName: this.nom,\n        firstName: this.prenom,\n        job: this.job,\n        email: this.email,\n        password: this.password\n      };\n      instance.post(\"auth/signup\", userInfos).then(response => {\n        this.$store.state.sessionToken = response.data.token; // Récupération du token dans le state\n\n        this.$store.state.userId = response.data.userId; // Récupération du userId dans le state\n\n        this.$router.push('/'); // Redirection vers accueil\n      }).catch(error => {\n        console.log(error);\n        this.errorMessage = error.response.data.error; // Affichage du message d'erreur\n      });\n    }\n  },\n  components: {\n    HeaderLog\n  }\n};","map":{"version":3,"mappings":"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","names":["HeaderLog","axios","require","instance","create","baseURL","name","path","props","data","titre","nom","prenom","job","email","password","emailDisplayed","passwordDisplayed","errorMessage","sessionToken","methods","nomRegexValid","regName","RegExp","testNom","exec","prenomRegexValid","testPrenom","jobRegexValid","testJob","analyseEmail","regEmail","testEmail","checkPassword","validatedFields","createAccount","userInfos","lastName","firstName","post","then","response","$store","state","token","userId","$router","push","catch","error","console","log","components"],"sourceRoot":"","sources":["/Users/clemencebonneaud/Desktop/Dev/OpenClassrooms/Cours/OC_P7/code/frontend/groupomania-v1.0/src/views/SignupView.vue"],"sourcesContent":["<!-- ////////////////////////////////////////////////// -->\n<!--                      TEMPLATE                      -->\n<!-- ////////////////////////////////////////////////// -->\n\n<template>\n  <div class=\"signup\">\n    <!-- Header -->\n    <HeaderLog />\n\n    <h1>{{ titre }}</h1>\n\n    <!-- Formulaire -->\n    <div class=\"bloc\">\n      <form>\n        <label>Nom</label>\n        <input v-model=\"nom\" type=\"text\" />\n        <p class=\"formMessage\" v-if=\"!nomRegexValid()\">\n          <!-- Message qui apparaît si le champ est mal rempli -->\n          Veuillez saisir un nom valide\n        </p>\n\n        <label>Prenom</label>\n        <input v-model=\"prenom\" type=\"text\" />\n        <p class=\"formMessage\" v-if=\"!prenomRegexValid()\">\n          Veuillez saisir un prénom valide\n        </p>\n\n        <label>Poste au sein de l'entreprise</label>\n        <input v-model=\"job\" type=\"text\" />\n        <p class=\"formMessage\" v-if=\"!jobRegexValid()\">\n          Veuillez saisir un poste valide\n        </p>\n\n        <label>Email</label>\n        <input v-model=\"email\" type=\"email\" @keyup=\"analyseEmail()\" />\n        <p class=\"formMessage\" v-if=\"emailDisplayed\">\n          Veuillez saisir un email valide\n        </p>\n\n        <label>Mot de passe</label>\n        <input v-model=\"password\" type=\"password\" @change=\"checkPassword()\" />\n        <p class=\"formMessage\" v-if=\"passwordDisplayed\">\n          Veuillez saisir un mot de passe\n        </p>\n      </form>\n\n      <!-- Message d'erreur en cas d'erreur côté serveur -->\n      <p v-if=\"errorMessage\" class=\"errorMessage\">\n        Oups ! Il semblerait que {{ errorMessage }}\n      </p>\n\n      <!-- Bouton désactivé -->\n      <button v-if=\"!validatedFields()\" class=\"bouton bouton--disabled\">\n        Se connecter\n      </button>\n\n      <!-- Bouton activé -->\n      <button v-if=\"validatedFields()\" class=\"bouton\" @click=\"createAccount()\">\n        Se connecter\n      </button>\n    </div>\n  </div>\n</template>\n\n<!-- ////////////////////////////////////////////////// -->\n<!--                       SCRIPT                       -->\n<!-- ////////////////////////////////////////////////// -->\n\n<script>\n// Header\nimport HeaderLog from \"@/components/HeaderLog.vue\";\n\n// Axios\nconst axios = require(\"axios\");\nconst instance = axios.create({\n  baseURL: \"http://localhost:3000/api/\",\n});\n\nexport default {\n  name: \"SignupView\",\n    path: \"/auth/signup\",\n  props: [\"\"],\n  data() {\n    return {\n      titre: \"S'inscrire\",\n      nom: \"\",\n      prenom: \"\",\n      job: \"\",\n      email: \"\",\n      password: \"\",\n      emailDisplayed: false,\n      passwordDisplayed: false,\n      errorMessage: null,\n      sessionToken: null,\n    };\n  },\n  methods: {\n    // Vérifications RegEx\n    nomRegexValid: function () {\n      let regName = new RegExp(\n        \"^[a-zA-Z-'.ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ ]*$\"\n      );\n      let testNom = regName.exec(this.nom);\n      return testNom;\n    },\n\n    prenomRegexValid: function () {\n      let regName = new RegExp(\n        \"^[a-zA-Z-'.ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ ]*$\"\n      );\n      let testPrenom = regName.exec(this.prenom);\n      return testPrenom;\n    },\n\n    jobRegexValid: function () {\n      let regName = new RegExp(\n        \"^[a-zA-Z-'.ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ ]*$\"\n      );\n      let testJob = regName.exec(this.job);\n      return testJob;\n    },\n\n    // Vérification Regex + gestion affichage message d'erreur\n    analyseEmail: function () {\n      let regEmail = new RegExp(\"[a-z0-9]+@[a-z]+[.]+[a-z]{2,3}\");\n      let testEmail = regEmail.exec(this.email);\n      if (testEmail) {\n        this.emailDisplayed = false;\n      } else {\n        this.emailDisplayed = true;\n      }\n    },\n\n    // Vérification présence mot de passe et gestion affichage message d'erreur\n    checkPassword: function () {\n      if (this.password != \"\") {\n        this.passwordDisplayed = false;\n      } else {\n        this.passwordDisplayed = true;\n      }\n    },\n\n    // Vérification de tous les champs et gestion activation/désactivation du bouton \"se connecter\"\n    validatedFields: function () {\n      let regName = new RegExp(\n        \"^[a-zA-Z-'.ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ ]*$\"\n      );\n      let regEmail = new RegExp(\"[a-z0-9]+@[a-z]+[.]+[a-z]{2,3}\");\n\n      let testNom = regName.exec(this.nom);\n      let testPrenom = regName.exec(this.prenom);\n      let testJob = regName.exec(this.job);\n      let testEmail = regEmail.exec(this.email);\n\n      if (\n        testNom &&\n        testPrenom &&\n        testJob &&\n        testEmail &&\n        this.password != \"\"\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    // Envoi API - création nouvel utilisateur\n    createAccount: function () {\n      let userInfos = {\n        lastName: this.nom,\n        firstName: this.prenom,\n        job: this.job,\n        email: this.email,\n        password: this.password,\n      };\n\n      instance\n        .post(\"auth/signup\", userInfos)\n        .then((response) => {\n          this.$store.state.sessionToken = response.data.token; // Récupération du token dans le state\n          this.$store.state.userId = response.data.userId; // Récupération du userId dans le state\n          this.$router.push('/'); // Redirection vers accueil\n        })\n        .catch((error) => {\n          console.log(error);\n          this.errorMessage = error.response.data.error; // Affichage du message d'erreur\n        });\n    },\n  },\n  components: { HeaderLog },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}